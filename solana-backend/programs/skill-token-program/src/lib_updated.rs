use anchor_lang::prelude::*;
use anchor_spl::{
    associated_token::AssociatedToken,
    token::{mint_to, Mint, MintTo, Token, TokenAccount},
};

declare_id!("8YucZC8CdypsXGFh35VxRKbSrm8T4hzSXbHGnxvE6VmN");

#[program]
pub mod skill_token_program {
    use super::*;

    pub fn initialize_player(ctx: Context<InitializePlayer>) -> Result<()> {
        let player_stats = &mut ctx.accounts.player_stats;
        player_stats.authority = ctx.accounts.authority.key();
        player_stats.headshots = 0;
        player_stats.kill_streaks = 0;
        player_stats.total_kills = 0;
        player_stats.xp = 0;
        player_stats.skills_tokens = 0;
        player_stats.last_kill_time = 0; // –î–ª—è streak tracking
        player_stats.current_streak = 0; // –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
        player_stats.bump = ctx.bumps.player_stats;
        
        msg!("Player initialized: {}", ctx.accounts.authority.key());
        Ok(())
    }

    pub fn process_kill_event(ctx: Context<ProcessKillEvent>, kill_type: String) -> Result<()> {
        let player_stats = &mut ctx.accounts.player_stats;
        let clock = Clock::get()?;
        let current_time = clock.unix_timestamp;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        player_stats.total_kills += 1;
        
        let mut tokens_to_mint = 0_u64;
        let mut reason = String::new();
        
        // üéØ –õ–û–ì–ò–ö–ê –ù–ê–ì–†–ê–î:
        
        // 1. HEADSHOT = 1 —Ç–æ–∫–µ–Ω —Å—Ä–∞–∑—É
        if kill_type == "headshot" {
            player_stats.headshots += 1;
            tokens_to_mint += 1_000_000; // 1 SKILLS —Ç–æ–∫–µ–Ω (6 decimals)
            reason.push_str("Headshot +1 SKILLS");
            
            msg!("üéØ HEADSHOT! Player: {}, Total headshots: {}", 
                 ctx.accounts.authority.key(), player_stats.headshots);
        }
        
        // 2. –ö–ê–ñ–î–´–ô 10-–ô KILL = 1 —Ç–æ–∫–µ–Ω  
        if player_stats.total_kills % 10 == 0 {
            tokens_to_mint += 1_000_000; // +1 SKILLS –∑–∞ 10 –∫–∏–ª–ª–æ–≤
            if !reason.is_empty() { reason.push_str(" + "); }
            reason.push_str("10 Kills +1 SKILLS");
            
            msg!("üî• 10 KILLS MILESTONE! Player: {}, Total kills: {}", 
                 ctx.accounts.authority.key(), player_stats.total_kills);
        }
        
        // 3. STREAK LOGIC (–ë–ï–ó –í–†–ï–ú–ï–ù–ù–´–• –õ–ò–ú–ò–¢–û–í!)
        // ‚ùå –£–ë–†–ê–õ–ò rate limiting - –≤ CS2 –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ —É–±–∏–≤–∞—Ç—å!
        
        // Streak –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
        player_stats.current_streak += 1;
        
        player_stats.last_kill_time = current_time;
        
        // –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ—Ä–∏–∏
        match player_stats.current_streak {
            5 => {
                tokens_to_mint += 1_000_000; // +1 –∑–∞ —Å–µ—Ä–∏—é 5
                if !reason.is_empty() { reason.push_str(" + "); }
                reason.push_str("5-Kill Streak +1 SKILLS");
                msg!("üî• 5-KILL STREAK! Player: {}", ctx.accounts.authority.key());
            },
            10 => {
                tokens_to_mint += 3_000_000; // +3 –∑–∞ —Å–µ—Ä–∏—é 10
                player_stats.kill_streaks += 1;
                if !reason.is_empty() { reason.push_str(" + "); }
                reason.push_str("10-Kill Streak +3 SKILLS");
                msg!("üöÄ 10-KILL STREAK! Player: {}", ctx.accounts.authority.key());
            },
            15 => {
                tokens_to_mint += 5_000_000; // +5 –∑–∞ —Å–µ—Ä–∏—é 15
                if !reason.is_empty() { reason.push_str(" + "); }
                reason.push_str("15-Kill Streak +5 SKILLS");
                msg!("üíÄ 15-KILL STREAK! Player: {}", ctx.accounts.authority.key());
            },
            _ => {} // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∏ –±–µ–∑ –Ω–∞–≥—Ä–∞–¥
        }
        
        // MINT –¢–û–ö–ï–ù–´ –µ—Å–ª–∏ –∑–∞—Å–ª—É–∂–∏–ª
        if tokens_to_mint > 0 {
            let cpi_accounts = MintTo {
                mint: ctx.accounts.skills_mint.to_account_info(),
                to: ctx.accounts.player_token_account.to_account_info(),
                authority: ctx.accounts.mint_authority.to_account_info(),
            };
            
            let cpi_program = ctx.accounts.token_program.to_account_info();
            let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);
            
            mint_to(cpi_ctx, tokens_to_mint)?;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            player_stats.skills_tokens += tokens_to_mint;
            player_stats.xp = (player_stats.headshots * 15) + (player_stats.kill_streaks * 100) + (player_stats.total_kills * 2);
            
            msg!("ü™ô SKILLS MINTED! Player: {}, Amount: {}, Reason: {}, Total: {}", 
                 ctx.accounts.authority.key(), tokens_to_mint / 1_000_000, reason, player_stats.skills_tokens / 1_000_000);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º XP –¥–∞–∂–µ –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤
            player_stats.xp = (player_stats.headshots * 15) + (player_stats.kill_streaks * 100) + (player_stats.total_kills * 2);
        }
        
        Ok(())
    }

    // Legacy –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ)
    pub fn mint_skills_token(ctx: Context<MintSkillsToken>, amount: u64, achievement_type: String) -> Result<()> {
        // Redirect to new method
        if achievement_type == "headshot" {
            return Self::process_kill_event(ctx.into(), "headshot".to_string());
        } else {
            return Self::process_kill_event(ctx.into(), "regular".to_string());
        }
    }

    pub fn get_player_stats(ctx: Context<GetPlayerStats>) -> Result<PlayerStats> {
        let player_stats = &ctx.accounts.player_stats;
        msg!("Player stats - Headshots: {}, Streaks: {}, Total Kills: {}, Current Streak: {}", 
             player_stats.headshots, player_stats.kill_streaks, player_stats.total_kills, player_stats.current_streak);
        Ok(*player_stats)
    }
}

// ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

#[derive(Accounts)]
pub struct ProcessKillEvent<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    
    #[account(
        mut,
        seeds = [b"player-stats", authority.key().as_ref()],
        bump = player_stats.bump
    )]
    pub player_stats: Account<'info, PlayerStats>,
    
    #[account(mut)]
    pub skills_mint: Account<'info, Mint>,
    
    #[account(
        mut,
        associated_token::mint = skills_mint,
        associated_token::authority = authority
    )]
    pub player_token_account: Account<'info, TokenAccount>,
    
    /// CHECK: This is the mint authority for SKILLS token
    pub mint_authority: UncheckedAccount<'info>,
    
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
}

#[account]
#[derive(Copy)]
pub struct PlayerStats {
    pub authority: Pubkey,
    pub headshots: u64,
    pub kill_streaks: u64,      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –ø–æ 10+ –∫–∏–ª–ª–æ–≤
    pub total_kills: u64,
    pub xp: u64,
    pub skills_tokens: u64,
    pub last_kill_time: i64,    // –î–ª—è streak tracking
    pub current_streak: u64,    // –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –∫–∏–ª–ª–æ–≤
    pub bump: u8,
}

impl PlayerStats {
    pub const LEN: usize = 32 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 1; // 97 bytes (–¥–æ–±–∞–≤–∏–ª–∏ 2 –ø–æ–ª—è)
}
